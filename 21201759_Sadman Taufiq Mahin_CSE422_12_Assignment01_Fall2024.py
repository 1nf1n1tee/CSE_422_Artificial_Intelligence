# -*- coding: utf-8 -*-
"""CSE 422 lab 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/136l0o7uIZoyXlD4RHGfZkbnSkA4nxMPG
"""

inp = open("/content/Input_file.txt", "r")
out = open("/content/output_file.txt", "w")
heuristic = {}
graph = {}

while True:
  line = inp.readline().split()
  if line:
    heuristic[line[0]] = [int(line[1]),[None,None]]
    #                                  parent,cost
    graph[line[0]] = {}
    if line[2:]:
      for i in range(0,len(line[2:]),2):
        graph[line[0]][line[2+i]] = int(line[2+i+1])
  else:
    break
import heapq
def a_star_search(start,goal,graph,heuristic):
  fringe = []
  heapq.heappush(fringe, (heuristic[start][0],start))
  n = start
  heuristic[n][1][1] = 0
  visited = []
  while n!=goal:
    f,n = heapq.heappop(fringe)
    cost = heuristic[n][1][1]
    visited.append(n)
    for keys in graph[n].keys():
      if keys not in visited:
        heapq.heappush(fringe,(heuristic[keys][0]+graph[n][keys],keys))
        heuristic[keys][1][0] = n
        if heuristic[keys][1][1] == None:
          heuristic[keys][1][1] = cost+graph[n][keys]
          heuristic[keys][1][0] = n
        elif heuristic[keys][1][1]<cost+graph[n][keys]:
          heuristic[keys][1][1] = heuristic[keys][1][1]
          heuristic[keys][1][0] = n
    if len(fringe) == 0:
      out.write('No path found')
      break

  n = goal
  path = ''
  while True:
    path = n+' '+path
    n=heuristic[n][1][0]
    if n == start:
      break
  path = n+' '+path
  out.write(path)
  out.write('\n')
  out.write(f'Path cost:{heuristic[goal][1][1]}km')
  out.close()
a_star_search('Arad','Bucharest',graph,heuristic)